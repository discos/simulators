"""Some examples:

  $ discos-simulator start -s active_surface
  $ discos-simulator stop -s active_surface
  $ discos-simulator start -s if_distributor
  $ discos-simulator stop -s if_distributor
"""
from __future__ import print_function
import importlib
import subprocess
import sys
from argparse import ArgumentParser, ArgumentTypeError

from simulators.server import Simulator
from simulators.utils import list_simulators

AVAILABLE_SIMULATORS = list_simulators()


def system_from_arg(system_name):
    try:
        return importlib.import_module('simulators.%s' % system_name)
    except ImportError as e:
        error = e.args[0]
        if 'No module named' in error:
            error = 'System "%s" unavailable.' % system_name
        else:
            error = error % system_name
        raise ArgumentTypeError(error)

parser = ArgumentParser()
parser.add_argument(
    'action',
    choices=['start', 'stop', 'list']
)
parser.add_argument(
    '-s', '--system',
    type=system_from_arg,
    required=False,
    help='System name: active_surface, acu, ...',
)
parser.add_argument(
    '-t', '--type',
    type=str,
    required=False,
    help='System configuration type: IFD_14_channels for if_distributor, ...',
)
args = parser.parse_args()

if args.action == 'list':
    print(
        "Available simulators: '"
        + "', '".join(AVAILABLE_SIMULATORS)
        + "'."
    )

kwargs = {}

if args.type:
    try:
        systems = getattr(args.system, 'systems')
    except AttributeError:
        parser.error(
            ('System %s has no configurations other than the default one. '
            % args.system.__name__.rsplit('.', 1)[1])
            + "Omit the '--type' flag to start the simulator properly."
        )
    if args.type not in systems:
        parser.error(
            'Configuration %s for system %s not found.'
            % (args.type, args.system.__name__.rsplit('.', 1)[1])
        )
    kwargs['system_type'] = args.type

if args.action == 'start':
    if args.system:
        simulator = Simulator(args.system, **kwargs)
        simulator.start()
    else:
        for sim in AVAILABLE_SIMULATORS:
            subprocess.Popen([
                sys.argv[0],
                'start',
                '-s',
                sim
            ])
elif args.action == 'stop':
    if args.system:
        simulator = Simulator(args.system, **kwargs)
        simulator.stop()
    else:
        for sim in AVAILABLE_SIMULATORS:
            sim = importlib.import_module('simulators.%s' % sim)
            simulator = Simulator(sim, **kwargs)
            simulator.stop()
        #ps = subprocess.Popen(
        #    ['ps', 'aux'],
        #    stdout=subprocess.PIPE
        #).communicate()[0]
        #processes = {}
        #for proc in ps.split('\n'):
        #    args = proc.split()
        #    if not args:
        #        continue
        #    command = ' '.join(args[10:])
        #    if '%s start -s %s' % (sys.argv[0], sim) in command:
        #        os.kill(int(args[1]), signal.SIGINT)
